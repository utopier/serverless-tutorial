# NOTE: update this with your service name
service: notes-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  myEnvironment:
    MESSAGE:
      prod: 'This is production environment'
      dev: 'Thid is production environment'
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-notes-infra
  # systemUrl: http://example.com/api/v1/
  # myProfile:
  #   prod: prodAccount
  #   dev: devAccount

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-2
  # profile: ${self:custom.myProfile.${self:cutom.myStage}}

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    # stripeSecretKey: ${env:STRIPE_SECRET_KEY}
    tableName:
      ${cf:${self:custom.stage}-notes-infra-dynamodb.TableName}
      # !ImportValue '${self:custom.sstApp}-TableName'
    # MESSAGE: ${self.custom.myEnvironment.MESSAGE.${self:custom.myStage}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - ${cf:${self:custom.stage}-notes-infra-dynamodb.TableArn}
        # - !ImportValue '${self:custom.sstApp}-TableArn'

functions:
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
    # environment:
    #   SYSTEM_URL: ${self:custom.systemUrl}notes
  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}
